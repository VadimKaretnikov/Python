# 3.
#
# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
#
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Д
# анный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке: https://pythonworld.ru/osnovy/peregruzka-operatorov.html
#


class Cell():
    def __init__(self, cnt):
        self.__cnt = cnt
    def __str__(self):
        print(f"Клетка, число ячеек {self.__cnt}")
    def __add__(self, other):
        return Cell(self.__cnt + other.__cnt)
    def __sub__(self, other):
        if self.__cnt < other.__cnt:
            print(f"Невозможно вычесть клетку с числом ячеек {other.__cnt} из клетки с числом ячеек {self.__cnt}")
        else:
            return Cell(self.__cnt - other.__cnt)
    def __mul__(self, other):
        return Cell(self.__cnt * other.__cnt)
    def __truediv__(self, other):
        return Cell(self.__cnt // other.__cnt)
    def __star_str(self, cnt_in_row):
        s = ''
        i = 0
        while i < cnt_in_row:
            i += 1
            s = s + '*'
        return s
    def make_order(self, cnt_in_row):
        if self.__cnt == 0:
            print("Нет ячеек")
            return
        r_n = self.__cnt // cnt_in_row
        i = 0
        while i < r_n:
            print(self.__star_str(cnt_in_row))
            i += 1
        tail = self.__cnt % cnt_in_row
        if tail > 0:
            print(self.__star_str(tail))

c1 = Cell(5)
c2 = Cell(6)
print("c1")
c1.make_order(5)
print("c2")
c2.make_order(5)
c3 = c1 + c2
print("c1+c2")
c3.make_order(5)
print("c1-c2")
c4 = c1 - c2
c5 = c1 * c2
print("c1*c2")
c5.make_order(10)
c6 = c1 / c2
print("c1/c2")
c6.make_order(10)



